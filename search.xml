<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python分享-1-初识Python</title>
      <link href="/2019/12/25/python-fen-xiang-1-chu-shi-python/"/>
      <url>/2019/12/25/python-fen-xiang-1-chu-shi-python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python分享第一节"><a href="#Python分享第一节" class="headerlink" title="Python分享第一节"></a>Python分享第一节</h1><p>最近受邀给团队中的小伙伴们分享Python知识，初步打算分成6节课教大家基础语法，然后再往数据分析方向拓展，本片是第一节课的基本内容。</p><h2 id="一、课前准备"><a href="#一、课前准备" class="headerlink" title="一、课前准备"></a>一、课前准备</h2><ol><li>笔记本电脑</li><li>Anaconda安装包</li></ol><h2 id="二、课堂主题"><a href="#二、课堂主题" class="headerlink" title="二、课堂主题"></a>二、课堂主题</h2><p>第一课主要帮助零基础的同学了解Python以及帮助大家安装好Python的工作环境，同时普及一些基本的计算机知识，从而让大家可以更快的开始Python语法的学习。</p><h2 id="三、本节目标"><a href="#三、本节目标" class="headerlink" title="三、本节目标"></a>三、本节目标</h2><p>1、Python简介</p><p>2、为什么要学习Python</p><p>3、Python的安装与jupyter notebook的安装与使用</p><p>4、如何书写Markdown</p><p>5、解决问题的通用方法&amp;书籍推荐</p><h2 id="四、知识要点"><a href="#四、知识要点" class="headerlink" title="四、知识要点"></a>四、知识要点</h2><h3 id="4-1、Python简介"><a href="#4-1、Python简介" class="headerlink" title="4.1、Python简介"></a>4.1、Python简介</h3><h4 id="4-1-1、什么是Python语言"><a href="#4-1-1、什么是Python语言" class="headerlink" title="4.1.1、什么是Python语言"></a>4.1.1、什么是Python语言</h4><p>在学习<strong>Python</strong>之前，先向大家普及一些基本的计算机知识。</p><p>用任何编程语言来开发程序，都是为了让计算机干活，比如下载一个文件，编写一个文档等等，而计算机干活的CPU只认识机器指令，所以，尽管不同的编程语言差异极大，最后都得“翻译”成CPU可以执行的机器指令。</p><p>相信大家在大学中都学过<strong>C</strong>语言，C语言的基本设计原则是让机器能够更快的运行，在那个年代，个人电脑的配置普遍都很低，所以更需要C这种更贴近于底层的语言，所以C语言的编写过程需要耗费大量的时间，即使他已经准确的知道功能应该如何实现，也因此，大家把C语言叫做<strong>面向过程</strong>的编程语言。 </p><p><strong>Python</strong>也是编程语言的一种，而且是一门<strong>高级</strong>编程语言，Python语法简单且功能强大，不仅适合初学者，也适合专业人员使用。</p><p>对于不同的编程语言来说，干同一个活，编写的代码量，差距也很大。</p><p>通常情况下，在完成同一种功能时，越高级的语言所需要的代码越少。可能完成同一个任务，C语言要写1000行代码，Java只需要写100行，而Python可能只要20行。 但是代码少的代价是运行速度慢，C程序运行1秒钟，Java程序可能需要2秒，而Python程序可能就需要10秒。 </p><h4 id="4-1-2、Python语言的优点"><a href="#4-1-2、Python语言的优点" class="headerlink" title="4.1.2、Python语言的优点"></a>4.1.2、Python语言的优点</h4><p>1、<strong>语法简单</strong>：Python是一种代表简单主义思想的语言，也是一种高级语言，不用考虑底层细节</p><p>2、<strong>易学</strong>：这点其实前面已经提到，python非常容易上手，类比于C语言来说有着极其简单的语法</p><p>3、<strong>免费、开源</strong>：Python是开放源代码的，你可以自由发布这个软件的拷贝、阅读源码、在它的基础上做改动</p><p>4、<strong>可移植性</strong>：由于Python开源的本质，它的代码不用修改就可以在多平台上运行</p><p>5、<strong>丰富的库</strong>：Python有众多的标准库与第三方库，它可以帮你处理各种各样的工作。</p><h4 id="4-1-3、Python可以干什么"><a href="#4-1-3、Python可以干什么" class="headerlink" title="4.1.3、Python可以干什么"></a>4.1.3、Python可以干什么</h4><p>1、<strong>web开发</strong>：做服务器端编程，Python在这方面有非常常熟的web开发框架，如 Django和Flask。国内外有很多知名的网站都是使用Python进行开发，比如：豆瓣 、NASA、YouTube、 Quora等等</p><p><img src="https://i.loli.net/2019/12/25/upe36RkTMj5ZEbB.png" alt="1577154510758.png"></p><p>2、<strong>系统网络运维、软件测试</strong>：在运维工作中，有大量的重复性工作，并需要管理、监控、发布系统等，可以使用Python将工作自动化，提高工作效率。</p><p><img src="https://i.loli.net/2019/12/25/4jVysdCN3Znfwgu.png" alt="1577154561956.png"></p><p><img src="https://i.loli.net/2019/12/25/dPiaH1IyZf5Vt2w.png" alt="1577154641884.png"></p><p>3、<strong>爬虫</strong><a href="https://www.baidu.com/link?url=DALeI_e5JmO7yg7yBBNHQmjRI0IFSaz7N-A4YnYN8f30JMUV2M0HAk3AVBr37jhCqY-x4kERVlvmrT7dHq15xeSOIUjNOQdjQN6LrfeVqHL08aVm_TFvwdRGhMuy_EmM&amp;wd=&amp;eqid=92850b150000a597000000045e01b589" target="_blank" rel="noopener">百度蜘蛛</a>：在爬虫领域，Python的地位无人撼动，将网络一切数据作为资源，通过自动化程序进行针对性的数据采集和处理。</p><p><img src="https://i.loli.net/2019/12/25/MkIi4yXPL1C8zcs.png" alt="1577154701107.png"></p><p>4、<strong>数据分析</strong>：Python被广泛的应用到科学与数据分析中，比如图像可视化、数值计算等等，常用的包有Numpy、Pandas等</p><p><img src="https://i.loli.net/2019/12/25/z39Hwq2unrFjlT6.png" alt="1577154956814.png"></p><p>5、<strong>人工智能&amp;机器学习</strong>：因为google等公司早期大量使用Python，为Python积累了丰富的科学运算库，所以当AI时代来临后，Python从众多编程语言中脱颖而出，现在各种人工只能算法都基于Python编写，Python作为AI时代头牌编程语言的位置基本确定   </p><p><img src="https://i.loli.net/2019/12/25/8Td6W13FyLthIBu.png" alt="1577155025423.png"></p><h3 id="4-2、为什么要学习Python"><a href="#4-2、为什么要学习Python" class="headerlink" title="4.2、为什么要学习Python"></a>4.2、为什么要学习Python</h3><p>上段时间有个新闻比较火：</p><p><img src="https://i.loli.net/2019/12/25/9VAsoIeZJWD6hUq.png" alt="1577169441328.png"><br><img src="https://i.loli.net/2019/12/25/VCdoDkqv94rx7Su.png" alt="1577169497916.png"></p><p>潘总是做房地产的，尤其是商业地产，收集/分析/预测市场数据/竞争对手数据太重要了，所以我猜测潘总是用Python做爬虫+数据分析+AI预测，这样SOHO中国就变成了地产科技公司，一下子和其他地产公司拉开了档次，不仅可以吸（ hū ）引（  yōu ）投资人，公司估值也会上一个台阶😎。</p><p>回归正题，通过上面的了解其实大家也大体能够明白学习Python的好处。</p><p>从普通工作的角度上来说，Python可以实现一些办公自动化操作（自动处理Excel、自动收发邮件、批量给图片加水印等等）。</p><p><a href="https://www.zhihu.com/question/313671299/answer/613206743" target="_blank" rel="noopener">用 Python <em>自动化办公</em>能做到哪些有趣或有用的事情？</a></p><p>对于数据分析师的岗位而言，Python是一个<strong>功能强大的工具</strong>，可以快速的处理数据并进行可视化。</p><p><a href="https://zhuanlan.zhihu.com/p/21799170" target="_blank" rel="noopener">零基础学习<em>Python数据分析</em></a></p><p>展望未来，人工智能正在迅速改变我们周围的一切，而Python提供了很多开箱即用的算法，让普通人也可以通过简单的学习做出一些人工智能的小应用</p><p><a href="https://www.zhihu.com/question/51920544/answer/934308870" target="_blank" rel="noopener">有没有简单一点的 Python 小例子或小项目？</a></p><p>最后，伟大的哲学家鲁迅说过：</p><p><img src="https://i.loli.net/2019/12/25/yHguxDOsLwjUkaX.png" alt="1577109404723.png"></p><h3 id="4-3、Jupyter-Notebook入门"><a href="#4-3、Jupyter-Notebook入门" class="headerlink" title="4.3、Jupyter Notebook入门"></a>4.3、Jupyter Notebook入门</h3><p> Jupyter Notebook 是一个在浏览器中使用的交互式的笔记本，可以实现将代码、文字完美结合起来，它的受众群体大多数是一些从事数据科学领域相关（机器学习、数据分析等）的人员。这里会告诉大家Jupyter Notebook入门时常用功能用法。 </p><h4 id="1）新建Notebook"><a href="#1）新建Notebook" class="headerlink" title="1）新建Notebook"></a>1）新建Notebook</h4><p>打开的界面主要包含了以上的几个菜单，我们点击<code>New</code>-<code>Python3</code>来创建一个Python3的.ipynb文件。</p><p>每一个Notebook主要包含三个区域：文件名菜单栏（工具栏）、内容编辑<img src="https://i.loli.net/2019/12/25/ECDjoJUTWYV692f.png" alt="1577153207427.png"></p><h4 id="2）修改文件名"><a href="#2）修改文件名" class="headerlink" title="2）修改文件名"></a>2）修改文件名</h4><p>直接点击文件名，可以重命名当前Notebook的文件名，这里修改为“demo”。</p><h4 id="3）熟悉菜单栏"><a href="#3）熟悉菜单栏" class="headerlink" title="3）熟悉菜单栏"></a>3）熟悉菜单栏</h4><p>这里介绍下常用的几个菜单栏的作用。</p><p><strong>File</strong></p><p>File 菜单中主要包含了以下功能：创建新的Notebook、打开新的界面、拷贝当前Notebook、重命名Notebook、保存还原点、恢复到指定还原点、查看Notebook预览、下载Notebook、关闭Notebook。</p><p>这里重点强调下<strong>下载Notebook</strong>选项，它可以将当前Notebook转为py文件、html文件、markdown文件、rest文件、latex文件、pdf文件。</p><p><img src="https://i.loli.net/2019/12/25/tQ2Pdpe8NhjK4sT.png" alt="1577153254992.png"></p><p><strong>Insert</strong></p><p>Insert 菜单中包含了在当前位置之下插入一个新的cell（单元格）、在当前位置之上插入一个新的cell（单元格）。</p><p><img src="https://i.loli.net/2019/12/25/pFPjB5LuWIJkYdz.png" alt="1577153283482.png"></p><p><strong>Cell</strong></p><p>Cell 菜单主要包含了运行cells、运行cells后并在之后插入新的cell、运行所有cells、运行当前之上的所有cell、运行当前之下的所有cell、改变cell类型（<strong>code</strong>、<strong>markdown</strong>、raw nbconvert）等。</p><p><img src="https://i.loli.net/2019/12/25/fEdtAa9usvbrHBW.png" alt="1577153334130.png"></p><p><strong>Kernel</strong></p><p>Kernel 菜单主要包含了中断kernel、重启kernel、重启kernel并清除输出、重启kernel并运行所有cell、重连kernel、关闭kernel、改变kernel类型。</p><p><img src="https://i.loli.net/2019/12/25/1xv6ojLgankbHZF.png" alt="1577153356024.png"></p><p><strong>Help</strong></p><p>Help 菜单主要包含了用户交互引导、键盘快捷键、修改键盘快捷键、Notebook帮助、Markdown帮助、Jupyter-notebook-extensions帮助、Python帮助、IPython帮助、Numpy帮助、Scipy帮助、Matplotlib帮助、Sympy帮助、pandas帮助等。</p><p><img src="https://i.loli.net/2019/12/25/EmKfqFIw9QeoWnv.png" alt="1577153384863.png"></p><p>如果能记住一些常用的快捷键，对使用Jupyter Notebook帮助还是很大的。</p><p><img src="https://i.loli.net/2019/12/25/oXj52HDq8adueLh.png" alt="1577155989202.png"></p><h4 id="4）熟悉工具栏"><a href="#4）熟悉工具栏" class="headerlink" title="4）熟悉工具栏"></a>4）熟悉工具栏</h4><p>工具栏上的内容都在下图中：</p><p>依次来介绍下，保存还原点、在当前位置之下添加cell、剪切当前cell、拷贝选择的cell、复制选择的cell、上移选中的cell、下移选中的cell、运行cell、中断kernel、重启kernel、修改cell类型、打开命令行调色板、美化cell代码。</p><p>很明显，工具栏中的功能大多都是菜单栏中的一部分功能的体现，主要是为了方便寻找。</p><h4 id="5）运行Python代码"><a href="#5）运行Python代码" class="headerlink" title="5）运行Python代码"></a>5）运行Python代码</h4><p>想要运行Python代码，其实很简单，因为Python代码最后都在 Cell 中编写的。首先在cell中编写好Python代码，然后点击运行，可以直接在下面看到结果。</p><p><img src="https://i.loli.net/2019/12/25/59SJRZucniflXgT.png" alt="1577153518545.png"></p><p>仔细一点，我们可以发现，第一个cell前面有 “In [1]:”提示符，第二个cell前面有“In[2]:”提示符，同时也有“Out[2]:”输出符，这是因为如果没有print语句的话，Notebook会将当前cell的最后一条语句的结果以“Out[?]:”的方式输出。</p><h4 id="6）编写Markdown"><a href="#6）编写Markdown" class="headerlink" title="6）编写Markdown"></a>6）编写Markdown</h4><p>Notebook最友好的一个功能就是可以在cell中通过Markdown来编写文本。我们首先创建一个cell，然后更改类型为markdown，更改成功后，cell开头没有“In[?]:”的提示符。然后点击cell，按照markdown语法来输入文本。</p><p>除了对markdown语法的支持外，同时也支持html代码，此外，也支持latex公式语法。</p><p>使用latex公式时，如果需要在当前行内插入公式，公式前后分别需要一个<code>$</code>，如果需要在下一行单独插入公式，公式前后分别需要两个<code>$</code>。</p><h3 id="4-4、Markdown的书写方法"><a href="#4-4、Markdown的书写方法" class="headerlink" title="4.4、Markdown的书写方法"></a>4.4、Markdown的书写方法</h3><h4 id="4-4-1、Markdown简介"><a href="#4-4-1、Markdown简介" class="headerlink" title="4.4.1、Markdown简介"></a>4.4.1、Markdown简介</h4><p>上面提到了Markdown，在这里稍微介绍一下。</p><ul><li>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。 </li><li>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。 </li></ul><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书等。很多在线文档编辑软件（腾讯文档、石墨文档、阿里开源的雨雀等等）也都对Markdown有着很好的支持。很多互联网公司也慢慢开始直接使用Markdown来撰写需求文档与演示文稿，大部分程序员都使用Markdown进行文章、博客的写作。大家现在看到的pdf也是我使用Markdown写的。</p><p><strong>优点：</strong><br> 1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br> 2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点：</strong><br> 1、需要记一些语法（当然，是很简单。五分钟学会）。<br> 2、有些平台不支持Markdown编辑模式。</p><h4 id="4-4-2、Markdown语法"><a href="#4-4-2、Markdown语法" class="headerlink" title="4.4.2、Markdown语法"></a>4.4.2、Markdown语法</h4><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字。</p><pre class=" language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 这是一级标题</span><span class="token title important"><span class="token punctuation">##</span> 这是二级标题</span><span class="token title important"><span class="token punctuation">###</span> 这是三级标题</span><span class="token title important"><span class="token punctuation">####</span> 这是四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 这是五级标题</span><span class="token title important"><span class="token punctuation">######</span> 这是六级标题</span></code></pre><p>效果如下：</p><p><img src="https://i.loli.net/2019/12/25/w3ZxEjHJ5lB9auF.png" alt="1577158953996.png"></p><h5 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h5><ul><li><strong>加粗</strong></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><strong>斜体</strong></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><strong>斜体加粗</strong></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><strong>删除线</strong></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><pre class=" language-markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span>这是加粗的文字<span class="token punctuation">**</span></span><span class="token italic"><span class="token punctuation">*</span>这是倾斜的文字<span class="token punctuation">*</span></span>`<span class="token bold"><span class="token punctuation">**</span>*这是斜体加粗的文字<span class="token punctuation">**</span></span>*~~这是加删除线的文字~~</code></pre><p>效果如下：</p><p><img src="https://i.loli.net/2019/12/25/WoyKFQlZvtg4pU2.png" alt="1577159140514.png"></p><h5 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h5><p> 在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;</p><pre class=" language-markdown"><code class="language-markdown"><span class="token blockquote punctuation">></span> 这里是引用内容<span class="token blockquote punctuation">>></span> 这里是引用内容</code></pre><p>效果如下：</p><p><img src="https://i.loli.net/2019/12/25/BzSDXRd5T2Ne7lU.png" alt="1577159370249.png"></p><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><pre class=" language-markdown"><code class="language-markdown">![图片名称](图片地址 ''图片title'')图片名称就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>效果如下：</p><p><img src="https://i.loli.net/2019/12/25/J3bYQhkWgnxyeBa.jpg" alt="1576203195960bcae2e5cd2fbba0d11e974dd0e8d3.jpg"></p><h5 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h5><pre class=" language-markdown"><code class="language-markdown"><span class="token url">[超链接名](超链接地址 <span class="token string">"超链接title"</span>)</span>title可加可不加</code></pre><p>效果如下：</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener"> Markdown 教程</a></p><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>1、<strong>无序列表</strong></p><pre class=" language-markdown"><code class="language-markdown"><span class="token list punctuation">-</span> 列表内容<span class="token list punctuation">+</span> 列表内容<span class="token list punctuation">*</span> 列表内容注意：- + * 跟内容之间都要有一个空格</code></pre><p>效果如下：</p><ul><li>列表</li></ul><p><strong>2、有序列表</strong></p><pre class=" language-markdown"><code class="language-markdown">1.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格</code></pre><p> 效果如下： </p><ol><li>有序列表</li><li>有序列表</li></ol><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><pre class=" language-markdown"><code class="language-markdown">|表头|表头|表头||---|:--:|---:||内容|内容|内容||内容|内容|内容|第二行分割表头和内容。<span class="token list punctuation">-</span> 有一个就行，为了对齐，多加了几个文字默认居左<span class="token list punctuation">-</span> 两边加 ：表示文字居中<span class="token list punctuation">-</span> 右边加 ：表示文字居右</code></pre><p> 效果如下： </p><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class=" language-markdown"><code class="language-markdown">​```  代码...  代码...  代码...​```</code></pre><p> 效果如下： </p><pre class=" language-mysql"><code class="language-mysql">select substr(a.pay_time,1,10),a.site_id as "站点",        a.trmnl_tp as "下单终端", b.site_l2_id as "端口",        count (distinct a.member_id)as "用户数",           count(distinct a.order_id)as "订单数"from    -- 取全部销售数据    (select pay_time,pay_mthd,order_id,sale_cnt,member_id,         wallet_amt,giftcard_amt,pay_amt,site_id,trmnl_tp    from dw.dw_ord_order_df    where system_del_flag = 0       and site_id<>'sibl' and site_tp='shein'       and shpp_country_nm='Australia'       and substr(pay_time,1,10)       between '2019-10-01'and '2019-10-20') as aleft join    -- 连接站点表，获取详细站点信息    (select site_l2_id,site_id from dw.dw_pub_site_td) as b         on b.site_id=a.site_id-- 通过时间和站点类型分类、汇总    group by substr(a.pay_time,1,10),b.site_l2_id,a.site_id,a.trmnl_tp</code></pre><h5 id="Markdown写作工具推荐"><a href="#Markdown写作工具推荐" class="headerlink" title="Markdown写作工具推荐"></a>Markdown写作工具推荐</h5><p>一个所见即所得的免费Markdown写作神器:<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a></p><h3 id="4-5、解决问题的通用方法-amp-书籍推荐"><a href="#4-5、解决问题的通用方法-amp-书籍推荐" class="headerlink" title="4.5、解决问题的通用方法&amp;书籍推荐"></a>4.5、解决问题的通用方法&amp;书籍推荐</h3><h4 id="4-5-1、“面向搜索引擎编程“"><a href="#4-5-1、“面向搜索引擎编程“" class="headerlink" title="4.5.1、“面向搜索引擎编程“"></a>4.5.1、“面向搜索引擎编程“</h4><p>大家在开始尝试写代码的时候总会遇到各种各样的问题，其中一部分包含程序的错误，对于这方面问题，我更倾向于通过搜索引擎找到答案。Python生态环境十分良好，初学者遇到的99.9%的问题在网上都有现成的解决办法。如果是思路上的问题同样可以通过网络进行查找，也可以寻求他人的帮助。</p><p>另外，在我们的学习过程中，刚开始我们知道怎么用就行了，理解原理固然更好，<strong>但千万不要钻牛角尖</strong>。对数据分析岗位来说，主要是要能了解工具的具体功能，当有需求、有想法时可以知道使用哪种工具可以更好更快的实现。</p><p>最后，如果在工作中，上网复制一段代码，理解后为我所用，这个是可以的，毕竟我们要保证生产力。但我们在刚开始学习的过程中，尽量不要去复制代码，学习编程最大的技巧就是<strong>多敲代码</strong>，敲的这个过程中，会出错，出错了就会去调试，调试的过程中会去思考，在调试和<strong>思考</strong>的过程中就是在不知不觉的进步。</p><h4 id="4-5-2、书籍推荐"><a href="#4-5-2、书籍推荐" class="headerlink" title="4.5.2、书籍推荐"></a>4.5.2、书籍推荐</h4><p>网络上Python的教学课程、书籍、公众号众多，大家可以自行寻找，这里只推荐两本书籍，如果有需要其他的学习资料，也可以直接找我要。</p><p>入门书籍：<a href="https://woodpecker.org.cn/abyteofpython_cn/chinese/" target="_blank" rel="noopener">简明Python教程</a></p><p>数据分析书籍：<a href="https://book.douban.com/subject/30283996/" target="_blank" rel="noopener">利用Python进行数据分析</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你安装Anaconda3</title>
      <link href="/2019/12/25/shou-ba-shou-jiao-ni-an-zhuang-anaconda3/"/>
      <url>/2019/12/25/shou-ba-shou-jiao-ni-an-zhuang-anaconda3/</url>
      
        <content type="html"><![CDATA[<h1 id="Anaconda3安装过程"><a href="#Anaconda3安装过程" class="headerlink" title="Anaconda3安装过程"></a>Anaconda3安装过程</h1><h2 id="一、Windows版本"><a href="#一、Windows版本" class="headerlink" title="一、Windows版本"></a>一、Windows版本</h2><h3 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h3><p><code>Anaconda</code>是一个开源的<code>Python</code>发行版本，<strong>包含了180多个科学报以及依赖</strong>，安装后可直接使用它自带的<code>jupyter notebook</code>进行代码编写，以下记录了安装的全过程，<strong>建议大家参照我的步骤安装</strong>。</p><p><img src="https://i.loli.net/2019/12/25/oyspGcCYDMikR1N.png" alt></p><p>点击<code>next</code></p><p><img src="https://i.loli.net/2019/12/25/Cv53qr7LwZg9oFe.png" alt></p><p>点击 <code>I Agree</code></p><p><img src="https://i.loli.net/2019/12/25/uaQNJD9vWVP2n1G.png" alt></p><p><strong>注意</strong>：如果系统只有一个用户选择第一个即可，如果有多个用户选第二个，==一般来说选择第一个==，然后点击<code>next</code>。</p><p><img src="https://i.loli.net/2019/12/25/QJeE3bt7TklxC8S.png" alt></p><p>为了避免之后不必要的麻烦，建议==直接使用默认路径安装==，大概占用3G空间。如果空间不够，再选择其他路径，路径中==尽量不要包含中文==，然后点击<code>next</code>。</p><p><img src="https://i.loli.net/2019/12/25/IowF6k5UNMq3Dh7.png" alt></p><p>将<code>add Anaconda to PATH environment variable</code><strong>选中</strong>，然后点击<code>next</code>，等待安装完成即可。</p><p>安装完成后显示上图点击<code>next</code>。</p><p><img src="https://i.loli.net/2019/12/25/OnWQ5APzL4kT8iH.png" alt></p><p>点击<code>next</code></p><p><img src="https://i.loli.net/2019/12/25/WLrKlnpA2d8ZyYV.png" alt></p><p>取消上图两个勾选，点击<code>finish</code>，安装完成。</p><h3 id="1-2、验证"><a href="#1-2、验证" class="headerlink" title="1.2、验证"></a>1.2、验证</h3><p>安装好之后，点击开始，可以查看到已经安装好的目录</p><p><img src="https://i.loli.net/2019/12/25/FEXYclgZLiO9DMx.png" alt></p><p>双击<img src="https://i.loli.net/2019/12/25/lByuaScALfjC13O.png" alt>)，会显示黑窗口<img src="https://i.loli.net/2019/12/25/7KpCYrkW3NhuUix.png" alt></p><p>然后会自动唤醒你的浏览器，打开<code>jupyter notebook</code>的根目录</p><p><img src="https://i.loli.net/2019/12/25/Q7mfZIcTnW64V5M.png" alt></p><p>点击左上角的<code>new</code>,然后点击<code>Python3</code></p><p><img src="https://i.loli.net/2019/12/25/vErGqeJc7mB5F9z.png" alt></p><p>点击后即可进入以下界面：<img src="https://i.loli.net/2019/12/25/KZgF3zVfRirlbQ9.png" alt></p><p>在上图方框中编写你的第一行<code>Python</code>代码，然后按<code>shift</code>+<code>enter</code>运行</p><p><img src="https://i.loli.net/2019/12/25/SsKz1tdT9JPpjf5.png" alt></p><h3 id="1-3、优化"><a href="#1-3、优化" class="headerlink" title="1.3、优化"></a>1.3、优化</h3><p>大家会发现，默认启动<code>jupyter notebook</code>会出现很多无关的文件，这里通过简单的配置，让大家可以从==指定位置==启动工作台。</p><p>首先大家可以在任意目录下创建一个文件夹，名称可以自己设定，主要用来存放以后所有的代码，文件夹路径==尽量不要出现中文==，下面以我自己的<code>D:\Python_note</code>为例</p><p>win+R调出控制台，输入cmd,点击确定</p><p><img src="https://i.loli.net/2019/12/25/wDqnSPmutdi8zlj.png" alt></p><p><img src="https://i.loli.net/2019/12/25/Eq9iWhPuSs4QADt.png" alt></p><p>在命令行中输入</p><pre class=" language-nginx"><code class="language-nginx">jupyter notebook <span class="token operator">--</span>generate<span class="token operator">-</span>config</code></pre><p><img src="https://i.loli.net/2019/12/25/dTe7QDzCjLKUZ4V.png" alt></p><p>复制红圈中的路径到<code>Windows</code>的资源管理器中并使用记事本打开,找到下面这一行：</p><p><img src="https://i.loli.net/2019/12/25/JFSNhpGZEiWQ8YK.png" alt="image-20191223164741600.png"></p><p>大家的显示样式可能和我不一样，可以忽略，只要改文字即可。将开头的<code>#</code>删掉，将路径填写进去,如下所示：</p><p><img src="https://i.loli.net/2019/12/25/aRfzrH3mcbIDU6e.png" alt="image-20191223164945795.png"></p><p>修改完成后保存退出，然后重新启动<code>jupyter notebook</code>，即可从指定目录启动。</p><p><img src="https://i.loli.net/2019/12/25/THudKFoh8QrCg4q.png" alt="image-20191223170024946"></p><p>如果通过以上修改后==可以启动但配置无效==，通过以下办法解决：</p><p>在开始菜单中右击更多-打开文件位置</p><p><img src="https://i.loli.net/2019/12/25/bntrR9zfgqUSKHL.png" alt="image-20191223170206904"></p><p>将<code>jupyter notebook</code>发送到桌面快捷方式</p><p>右键选择<code>属性</code>，将<code>"%USERPROFILE"</code>删除，然后点==应用==，</p><p><img src="https://i.loli.net/2019/12/25/n9poNARGXWs5PqD.png" alt="image-20191223170625932"></p><p>关闭窗口双击快捷方式打开<code>jupyter notebook</code>，问题解决。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN-2-使用python实现完整的KNN算法</title>
      <link href="/2019/12/25/knn-2-shi-yong-python-shi-xian-wan-zheng-de-knn-suan-fa/"/>
      <url>/2019/12/25/knn-2-shi-yong-python-shi-xian-wan-zheng-de-knn-suan-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Python完成一个完整的KNN算法"><a href="#使用Python完成一个完整的KNN算法" class="headerlink" title="使用Python完成一个完整的KNN算法"></a>使用Python完成一个完整的KNN算法</h1><p>本篇文章使用python模拟实现一个简单的KNN算法，并且引入一些机器学习的基本概念。</p><h2 id="1、数据准备"><a href="#1、数据准备" class="headerlink" title="1、数据准备"></a>1、数据准备</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> font_manager<span class="token operator">%</span> matplotlib inline</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># raw_data_x是特征，raw_data_y是标签，0为良性，1为恶性</span>raw_data_X <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3.393533211</span><span class="token punctuation">,</span> <span class="token number">2.331273381</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3.110073483</span><span class="token punctuation">,</span> <span class="token number">1.781539638</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">1.343853454</span><span class="token punctuation">,</span> <span class="token number">3.368312451</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">3.582294121</span><span class="token punctuation">,</span> <span class="token number">4.679917921</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">2.280362211</span><span class="token punctuation">,</span> <span class="token number">2.866990212</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7.423436752</span><span class="token punctuation">,</span> <span class="token number">4.685324231</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">5.745231231</span><span class="token punctuation">,</span> <span class="token number">3.532131321</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">9.172112222</span><span class="token punctuation">,</span> <span class="token number">2.511113104</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7.927841231</span><span class="token punctuation">,</span> <span class="token number">3.421455345</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span><span class="token number">7.939831414</span><span class="token punctuation">,</span> <span class="token number">0.791631213</span><span class="token punctuation">]</span>             <span class="token punctuation">]</span>raw_data_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="2、设置训练组"><a href="#2、设置训练组" class="headerlink" title="2、设置训练组"></a>2、设置训练组</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 设置训练组</span>X_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>raw_data_X<span class="token punctuation">)</span>y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>raw_data_y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y_train<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(y_train.flatten())</span>my_font <span class="token operator">=</span> font_manager<span class="token punctuation">.</span>FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span><span class="token string">'C:/Windows/Fonts/simsun.ttc'</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将数据可视化</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span>y_train<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>X_train<span class="token punctuation">[</span>y_train<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'g'</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'良性'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span>y_train<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>X_train<span class="token punctuation">[</span>y_train<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> label <span class="token operator">=</span> <span class="token string">'恶性'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token number">8.90933607318</span><span class="token punctuation">,</span><span class="token number">3.365731514</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Tumor Size'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>annotate<span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">,</span>            xy<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8.90933607318</span><span class="token punctuation">,</span><span class="token number">3.365731514</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xycoords<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>            xytext<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> textcoords<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">,</span>            arrowprops<span class="token operator">=</span>dict<span class="token punctuation">(</span>arrowstyle<span class="token operator">=</span><span class="token string">"->"</span><span class="token punctuation">,</span>                            connectionstyle<span class="token operator">=</span><span class="token string">"arc3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc <span class="token operator">=</span><span class="token string">"best"</span><span class="token punctuation">,</span>prop<span class="token operator">=</span>my_font<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre><code>(10, 2)(10,)</code></pre><p><img src="https://i.loli.net/2019/12/25/fQHJnFCVlM4LOvq.png" alt></p><h2 id="3、分类"><a href="#3、分类" class="headerlink" title="3、分类"></a>3、分类</h2><p>那么现在给出一个肿瘤患者的数据（样本点）x：[8.90933607318, 3.365731514]，是良性肿瘤还是恶性肿瘤</p><h3 id="3-1、求距离"><a href="#3-1、求距离" class="headerlink" title="3.1、求距离"></a>3.1、求距离</h3><p>我们要做的是：求点x到数据集中每个点的距离，首先计算距离，使用欧氏距离</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrtx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">8.90933607318</span><span class="token punctuation">,</span> <span class="token number">3.365731514</span><span class="token punctuation">]</span>distances <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 用来记录x到样本数据集中每个点的距离</span><span class="token keyword">for</span> x_train <span class="token keyword">in</span> X_train<span class="token punctuation">:</span>    d <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x_train <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    distances<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用列表生成器，一行就能搞定，对于X_train中的每一个元素x_train都进行前面的运算，</span><span class="token comment" spellcheck="true"># 把结果生成一个列表</span>distances <span class="token operator">=</span> <span class="token punctuation">[</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x_train <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x_train <span class="token keyword">in</span> X_train<span class="token punctuation">]</span>distances</code></pre><pre><code>输出：[5.611968000921151, 6.011747706769277, 7.565483059418645, 5.486753308891268, 6.647709180746875, 1.9872648870854204, 3.168477291709152, 0.8941051007010301, 0.9830754144862234, 2.7506238644678445]</code></pre><h3 id="3-2、对距离排序"><a href="#3-2、对距离排序" class="headerlink" title="3.2、对距离排序"></a>3.2、对距离排序</h3><p>在求出距离列表之后，我们要找到最小的距离，需要进行一次<code>排序操作</code>。其实不是简单的排序，因为我们把只将距离排大小是没有意义的，我们要知道距离最小的k个点是在样本集中的位置。</p><p>这里我们使用函数：<code>np.argsort(array)</code> 对一个数组进行排序，返回的是相应的排序后结果的索引</p><pre class=" language-python"><code class="language-python">nearest <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>distances<span class="token punctuation">)</span>nearest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span></code></pre><pre><code>输出：array([7, 8, 5, 9, 6, 3], dtype=int64)</code></pre><p>然后我们选择k值，这里暂定为6，那就找出最近的6个点（top 6），并记录他们的标签值（y）</p><pre class=" language-python"><code class="language-python">k <span class="token operator">=</span> <span class="token number">6</span>topK_y <span class="token operator">=</span> <span class="token punctuation">[</span>y_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> nearest<span class="token punctuation">[</span><span class="token punctuation">:</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span>topK_y</code></pre><pre><code>输出：[1, 1, 1, 1, 1, 0]</code></pre><h3 id="3-3、决策规则"><a href="#3-3、决策规则" class="headerlink" title="3.3、决策规则"></a>3.3、决策规则</h3><p>下面进入投票环节。找到与测试样本点最近的6个训练样本点的标签y是什么。可以查不同类别的点有多少个。</p><p>将数组中的元素和元素出现的频次进行统计</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Countervotes <span class="token operator">=</span> Counter<span class="token punctuation">(</span>topK_y<span class="token punctuation">)</span>votes</code></pre><pre><code>输出：Counter({1: 5, 0: 1})</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Counter.most_common(n) </span><span class="token comment" spellcheck="true"># 找出票数最多的n个元素，返回的是一个列表，</span><span class="token comment" spellcheck="true"># 列表中的每个元素是一个元组，元组中第一个元素是对应的元素是谁</span>predict_y <span class="token operator">=</span> votes<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>predict_y</code></pre><pre><code>输出：1</code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>writefile kNN<span class="token punctuation">.</span>py<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> math <span class="token keyword">as</span> sqrt<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">class</span> <span class="token class-name">kNNClassifier</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化分类器"""</span>        <span class="token keyword">assert</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"k must be valid"</span>        self<span class="token punctuation">.</span>k <span class="token operator">=</span> k        self<span class="token punctuation">.</span>_X_train <span class="token operator">=</span> None        self<span class="token punctuation">.</span>_y_train <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""根据训练数据集X_train和y_train训练kNN分类器"""</span>        <span class="token keyword">assert</span> X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> y_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">"the size of X_train must be equal to the size of y_train"</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>k <span class="token operator">&lt;=</span> X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">"the size of X_train must be at least k"</span>        self<span class="token punctuation">.</span>_X_train <span class="token operator">=</span> X_train        self<span class="token punctuation">.</span>_y_train <span class="token operator">=</span> y_train                <span class="token keyword">return</span> self        <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>X_predict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""给定待预测数据集X_predict，返回表示X_predict结果的向量"""</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>_X_train <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> self<span class="token punctuation">.</span>_y_train <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">,</span>            <span class="token string">"must fit before predict!"</span>        <span class="token keyword">assert</span> X_predict<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>_X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             <span class="token string">"the feature number of X_predict must be equal to X_train"</span>        y_predict <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>_predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> X_predict<span class="token punctuation">]</span>                <span class="token keyword">return</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_predict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        distances <span class="token operator">=</span> <span class="token punctuation">[</span>sqrt<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">(</span>x_train <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x_train <span class="token keyword">in</span> self<span class="token punctuation">.</span>_X_train<span class="token punctuation">]</span>        nearest <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>distances<span class="token punctuation">)</span>        topK_y <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>_y_train<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> nearest<span class="token punctuation">]</span>        votes <span class="token operator">=</span> Counter<span class="token punctuation">(</span>topK_y<span class="token punctuation">)</span>                <span class="token keyword">return</span> votes<span class="token punctuation">.</span>most_common<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"kNN(k=%d)"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>k</code></pre><pre class=" language-python"><code class="language-python"><span class="token operator">%</span>run kNN<span class="token punctuation">.</span>pyknn_clf <span class="token operator">=</span> kNNClassifier<span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>x<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8.90933607318</span><span class="token punctuation">,</span> <span class="token number">3.365731514</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(x.reshape(1,-1))</span>X_predict <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>y_predict <span class="token operator">=</span> knn_clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_predict<span class="token punctuation">)</span>y_predict<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><pre><code>输出：1</code></pre><h2 id="4、在sklearn中使用KNN"><a href="#4、在sklearn中使用KNN" class="headerlink" title="4、在sklearn中使用KNN"></a>4、在sklearn中使用KNN</h2><p>对于机器学习来说，其流程是：训练数据集 -&gt; 机器学习算法 -fit-&gt; 模型 输入样例 -&gt; 模型 -predict-&gt; 输出结果</p><p>我们之前说过，kNN算法没有模型，模型其实就是训练数据集，predict的过程就是求k近邻的过程。</p><p>我们使用sklearn中已经封装好的kNN库。你可以看到使用有多么简单。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier<span class="token comment" spellcheck="true"># 创建kNN_classifier实例</span>kNN_classifier <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># kNN_classifier做一遍fit(拟合)的过程，没有返回值，</span><span class="token comment" spellcheck="true"># 模型就存储在kNN_classifier实例中</span>a <span class="token operator">=</span> kNN_classifier<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># kNN进行预测predict，需要传入一个矩阵，而不能是一个数组。reshape()成一个二维数组，第一个参数是1表示只有一个数据，第二个参数-1，numpy自动决定第二维度有多少</span>y_predict <span class="token operator">=</span> a<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y_predict</code></pre><pre><code>KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',           metric_params=None, n_jobs=1, n_neighbors=6, p=2,           weights='uniform')array([1])</code></pre><p>在<code>kNN_classifier.fit(X_train, y_train)</code>这行代码后其实会有一个输出：</p><pre class=" language-python"><code class="language-python">KNeighborsClassifier<span class="token punctuation">(</span>algorithm<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> leaf_size<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> metric<span class="token operator">=</span><span class="token string">'minkowski'</span><span class="token punctuation">,</span>           metric_params<span class="token operator">=</span>None<span class="token punctuation">,</span> n_jobs<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> n_neighbors<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>           weights<span class="token operator">=</span><span class="token string">'uniform'</span><span class="token punctuation">)</span></code></pre><pre><code>KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',           metric_params=None, n_jobs=1, n_neighbors=6, p=2,           weights='uniform')</code></pre><p>参数：</p><p>class sklearn.neighbors.KNeighborsClassifier(n_neighbors=5, weights=’uniform’, algorithm=’auto’, leaf_size=30, p=2, metric=’minkowski’, metric_params=None, n_jobs=None, **kwargs)</p><p>我们研究一下参数：</p><ul><li><p><code>n_neighbors</code>: int, 可选参数(默认为 5)。用于kneighbors查询的默认邻居的数量</p></li><li><p><code>weights（权重）</code>: str or callable(自定义类型), 可选参数(默认为 ‘uniform’)。用于预测的权重参数，可选参数如下：</p><ul><li><p><code>uniform</code> : 统一的权重. 在每一个邻居区域里的点的权重都是一样的。</p></li><li><p><code>distance</code> : 权重点等于他们距离的倒数。</p><p>使用此函数，更近的邻居对于所预测的点的影响更大。</p></li><li><p><code>[callable]</code> : 一个用户自定义的方法，此方法接收一个距离的数组，然后返回一个相同形状并且包含权重的数组。</p></li></ul></li><li><p>algorithm（算法）: {‘auto’, ‘ball_tree’, ‘kd_tree’, ‘brute’}, 可选参数（默认为 ‘auto’）。计算最近邻居用的算法：</p><ul><li><p><code>ball_tree</code> 使用算法BallTree</p></li><li><p><code>kd_tree</code> 使用算法KDTree</p></li><li><p><code>brute</code> 使用暴力搜索</p></li><li><p><code>auto</code> 会基于传入fit方法的内容，选择最合适的算法。</p></li></ul></li></ul><p>注意 : 如果传入fit方法的输入是稀疏的，将会重载参数设置，直接使用暴力搜索。</p><ul><li><p><code>leaf_size（叶子数量）</code>: int, 可选参数(默认为 30)。传入BallTree或者KDTree算法的叶子数量。此参数会影响构建、查询BallTree或者KDTree的速度，以及存储BallTree或者KDTree所需要的内存大小。此可选参数根据是否是问题所需选择性使用。</p></li><li><p><code>p</code>: integer, 可选参数(默认为 2)。用于Minkowski metric（闵可夫斯基空间）的超参数。p = 1, 相当于使用曼哈顿距离，p = 2, 相当于使用欧几里得距离]，对于任何 p ，使用的是闵可夫斯基空间。</p></li><li><p><code>metric（矩阵）</code>: string or callable, 默认为 ‘minkowski’。用于树的距离矩阵。默认为闵可夫斯基空间，如果和p=2一块使用相当于使用标准欧几里得矩阵. 所有可用的矩阵列表请查询 DistanceMetric 的文档。</p></li><li><p><code>metric_params（矩阵参数）</code>: dict, 可选参数(默认为 None)。给矩阵方法使用的其他的关键词参数。</p></li><li><p><code>n_jobs</code>: int, 可选参数(默认为 1)。用于搜索邻居的，可并行运行的任务数量。如果为-1, 任务数量设置为CPU核的数量。不会影响fit</p></li></ul><p>对于<code>KNeighborsClassifier</code>的方法：</p><table><thead><tr><th>方法名</th><th>含义</th></tr></thead><tbody><tr><td>fit(X, y)</td><td>使用X作为训练数据，y作为目标值（类似于标签）来拟合模型。</td></tr><tr><td>get_params([deep])</td><td>获取估值器的参数。</td></tr><tr><td>neighbors([X, n_neighbors, return_distance])</td><td>查找一个或几个点的K个邻居。</td></tr><tr><td>kneighbors_graph([X, n_neighbors, mode])</td><td>计算在X数组中每个点的k邻居的（权重）图。</td></tr><tr><td>predict(X)</td><td>给提供的数据预测对应的标签。</td></tr><tr><td>predict_proba(X)</td><td>返回测试数据X的概率估值</td></tr><tr><td>score(X, y[, sample_weight])</td><td>返回给定测试数据和标签的平均准确值。</td></tr><tr><td>set_params(**params)</td><td>设置估值器的参数。</td></tr></tbody></table><h2 id="5、超参数"><a href="#5、超参数" class="headerlink" title="5、超参数"></a>5、超参数</h2><h3 id="5-1、超参数简介"><a href="#5-1、超参数简介" class="headerlink" title="5.1、超参数简介"></a>5.1、超参数简介</h3><p>之前我们都是为knn算法传一个默认的k值。在具体使用时应该传递什么值合适呢？</p><p>这就涉及了机器学习领域中的一个重要问题：超参数。所谓超参数，就是在机器学习算法模型执行之前需要指定的参数。（调参调的就是超参数） 如kNN算法中的k。</p><p>与之相对的概念是模型参数，即算法过程中学习的属于这个模型的参数（kNN中没有模型参数，回归算法有很多模型参数）</p><p>如何选择最佳的超参数，这是机器学习中的一个永恒的问题。在实际业务场景中，调参的难度大很多，一般我们会业务领域知识、经验数值、实验搜索等方面获得最佳参数。### 4、在sklearn中使用KNN</p><h3 id="5-2、寻找最好的k"><a href="#5-2、寻找最好的k" class="headerlink" title="5.2、寻找最好的k"></a>5.2、寻找最好的k</h3><h4 id="5-2-1、对K进行遍历"><a href="#5-2-1、对K进行遍历" class="headerlink" title="5.2.1、对K进行遍历"></a>5.2.1、对K进行遍历</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdiris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> iris<span class="token punctuation">.</span>datay <span class="token operator">=</span> iris<span class="token punctuation">.</span>target<span class="token keyword">def</span> <span class="token function">train_test_split_temp</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_ratio<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> seed<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""将矩阵X和标签y按照test_ration分割成X_train, X_test, y_train, y_test"""</span>    <span class="token keyword">assert</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token string">"the size of X must be equal to the size of y"</span>    <span class="token keyword">assert</span> <span class="token number">0.0</span> <span class="token operator">&lt;=</span> test_ratio <span class="token operator">&lt;=</span> <span class="token number">1.0</span><span class="token punctuation">,</span>         <span class="token string">"test_train must be valid"</span>    <span class="token keyword">if</span> seed<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 是否使用随机种子，使随机结果相同，方便debug</span>        np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># permutation(n) 可直接生成一个随机排列的数组，含有n个元素</span>    shuffle_index <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>len<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_size <span class="token operator">=</span> int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token operator">*</span> test_ratio<span class="token punctuation">)</span>    test_index <span class="token operator">=</span> shuffle_index<span class="token punctuation">[</span><span class="token punctuation">:</span>test_size<span class="token punctuation">]</span>    train_index <span class="token operator">=</span> shuffle_index<span class="token punctuation">[</span>test_size<span class="token punctuation">:</span><span class="token punctuation">]</span>    X_train <span class="token operator">=</span> X<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>    X_test <span class="token operator">=</span> X<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>    y_train <span class="token operator">=</span> y<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>    y_test <span class="token operator">=</span> y<span class="token punctuation">[</span>test_index<span class="token punctuation">]</span>        <span class="token keyword">return</span> X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_testX_train1<span class="token punctuation">,</span> X_test1<span class="token punctuation">,</span> y_train1<span class="token punctuation">,</span> y_test1 <span class="token operator">=</span> train_test_split_temp<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 指定最佳值的分数，初始化为0.0；设置最佳值k，初始值为-1</span>best_score <span class="token operator">=</span> <span class="token number">0.0</span>best_k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 暂且设定到1～11的范围内</span>    knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span>k<span class="token punctuation">)</span>    knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train1<span class="token punctuation">,</span> y_train1<span class="token punctuation">)</span>    score <span class="token operator">=</span> knn_clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test1<span class="token punctuation">,</span> y_test1<span class="token punctuation">)</span>        <span class="token keyword">if</span> score <span class="token operator">></span> best_score<span class="token punctuation">:</span>        best_k <span class="token operator">=</span> k        best_score <span class="token operator">=</span> score<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best_k = "</span><span class="token punctuation">,</span> best_k<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best_score = "</span><span class="token punctuation">,</span> best_score<span class="token punctuation">)</span></code></pre><pre><code>输出：best_k =  3best_score =  0.9666666666666667</code></pre><p>可以看到，最好的k值是3，在我们设定的k的取值范围中间。需要注意的是，如果我们得到的值正好在边界上，我们需要稍微扩展一下取值范围。因为嘛，你懂的！</p><h4 id="5-2-2、K折交叉验证"><a href="#5-2-2、K折交叉验证" class="headerlink" title="5.2.2、K折交叉验证"></a>5.2.2、K折交叉验证</h4><p>常用的交叉验证技术叫做<code>K折交叉验证(K-fold Cross Validation)</code>。 我们先把训练数据再分成训练集和验证集，之后使用训练集来训练模型，然后再验证集上评估模型的准确率。举个例子，比如一个模型有个参数叫$\alpha$，我们一开始不清楚要选择0.1还是1，所以这时候我们进行了交叉验证：把所有训练集分成K块，依次对每一个$\alpha$值评估它的准确率。</p><p>一般情况下数据量较少的时候我们取的K值会更大，为什么呢? 因为数据量较少的时候如果每次留出比较多的验证数据，对于训练模型本身来说是比较吃亏的，所以这时候我们尽可能使用更多的数据来训练模型。由于每次选择的验证数据量较少，这时候K折中的K值也会随之而增大，但到最后可以发现，无论K值如何选择，用来验证的样本个数都是等于总样本个数。</p><p>最极端的情况下，我们可以采用<code>leave_one_out</code>交叉验证，也就是每次只把一个样本当做验证数据，剩下的其他数据都当做是训练样本。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> KFoldiris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> iris<span class="token punctuation">.</span>datay <span class="token operator">=</span> iris<span class="token punctuation">.</span>target<span class="token comment" spellcheck="true"># 定义我们想要搜索的K值</span>ks <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进行5折交叉验证，KFold返回的是每一折中训练数据和验证数据的index</span><span class="token comment" spellcheck="true"># 假设数据样本为： [1,3,5,6,11,12,43,12,44,2], 总共10个样本</span><span class="token comment" spellcheck="true"># 则返回的kf的格式为(前面的是训练数据，后面的是验证集）：</span><span class="token comment" spellcheck="true"># [0,1,3,5,6,7,8,9], [2,4]</span><span class="token comment" spellcheck="true"># [0,1,2,4,6,7,8,9], [3,5]</span><span class="token comment" spellcheck="true"># [1,2,3,4,5,6,7,8], [0,9]</span><span class="token comment" spellcheck="true"># [0,1,2,3,4,5,7,9], [6,8]</span><span class="token comment" spellcheck="true"># [0,2,3,4,5,6,8,9], [1,7]</span>kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">1234</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存当前最好的K值和对应的准确率值</span>best_k <span class="token operator">=</span> ks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>best_score <span class="token operator">=</span> <span class="token number">0.0</span><span class="token comment" spellcheck="true"># 循环每一个K值</span><span class="token keyword">for</span> k <span class="token keyword">in</span> ks<span class="token punctuation">:</span>    cur_score <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> train_index<span class="token punctuation">,</span> valid_index <span class="token keyword">in</span> kf<span class="token punctuation">.</span>split<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#         print(train_index)</span>        <span class="token comment" spellcheck="true"># 每一折的训练以及计算准确率</span>        clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span>k<span class="token punctuation">)</span>        clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span><span class="token punctuation">)</span>        cur_score <span class="token operator">=</span> cur_score <span class="token operator">+</span> clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">[</span>valid_index<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>valid_index<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 求一下5折的平均准确率</span>    avg_score <span class="token operator">=</span> cur_score<span class="token operator">/</span><span class="token number">5</span>    <span class="token keyword">if</span> avg_score <span class="token operator">></span> best_score<span class="token punctuation">:</span>        best_score <span class="token operator">=</span> avg_score        best_k <span class="token operator">=</span> k        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"current best score is %f"</span><span class="token operator">%</span>best_score<span class="token punctuation">,</span><span class="token string">"best k is %d"</span><span class="token operator">%</span>best_k<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after cross validation, the final besk k is %d"</span><span class="token operator">%</span>best_k<span class="token punctuation">)</span></code></pre><pre><code>输出：current best score is 0.960000 best k is 1current best score is 0.973333 best k is 8current best score is 0.986667 best k is 9after cross validation, the final besk k is 9</code></pre><p>sklearn中实现</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#调用网格搜索方法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCVparam_search <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"n_neighbors"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>knn_clf<span class="token punctuation">,</span> param_search<span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best score is %f"</span><span class="token operator">%</span>clf<span class="token punctuation">.</span>best_score_<span class="token punctuation">,</span><span class="token string">"best k is "</span><span class="token punctuation">,</span> clf<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span></code></pre><pre><code>输出：best score is 0.980000 best k is  {'n_neighbors': 6}</code></pre><blockquote><p>对于交叉验证，决不能用测试数据来引导模型的训练</p></blockquote><h3 id="5-3、另一个超参数：权重"><a href="#5-3、另一个超参数：权重" class="headerlink" title="5.3、另一个超参数：权重"></a>5.3、另一个超参数：权重</h3><p>在回顾kNN算法思想时，我们应该还记得，对于简单的kNN算法，只需要考虑最近的n个数据是什么即可。但是如果我们考虑距离呢？</p><p>如果我们认为，距离样本数据点最近的节点，对其影响最大，那么我们使用距离的倒数作为权重。假设距离样本点最近的三个节点分别是红色、蓝色、蓝色，距离分别是1、4、3。那么普通的k近邻算法：蓝色获胜。考虑权重（距离的倒数）：红色：1，蓝色：1/3 + 1/4 = 7/12，红色胜。</p><p>在 <code>sklearn.neighbors</code> 的构造函数 <code>KNeighborsClassifier</code> 中有一个参数：<code>weights</code>，默认是<code>uniform</code>即不考虑距离，也可以写<code>distance</code>来考虑距离权重(默认是欧拉距离，如果要是曼哈顿距离，则可以写参数p（明可夫斯基距离的参数），这个也是超参数)</p><p>因为有两个超参数，因此使用双重循环，去查找最合适的两个参数，并打印。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 两种方式进行比较</span>best_method <span class="token operator">=</span> <span class="token string">""</span>best_score <span class="token operator">=</span> <span class="token number">0.0</span>best_k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> method <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"uniform"</span><span class="token punctuation">,</span><span class="token string">"distance"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span>k<span class="token punctuation">,</span> weights<span class="token operator">=</span>method<span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train1<span class="token punctuation">,</span> y_train1<span class="token punctuation">)</span>        score <span class="token operator">=</span> knn_clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test1<span class="token punctuation">,</span> y_test1<span class="token punctuation">)</span>                <span class="token keyword">if</span> score <span class="token operator">></span> best_score<span class="token punctuation">:</span>            best_k <span class="token operator">=</span> k            best_score <span class="token operator">=</span> score            best_method <span class="token operator">=</span> method<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best_method = "</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best_k = "</span><span class="token punctuation">,</span> best_k<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"best_score = "</span><span class="token punctuation">,</span> best_score<span class="token punctuation">)</span></code></pre><pre><code>输出：best_method =  distancebest_k =  3best_score =  0.9666666666666667</code></pre><h3 id="5-4、超参数网格搜索"><a href="#5-4、超参数网格搜索" class="headerlink" title="5.4、超参数网格搜索"></a>5.4、超参数网格搜索</h3><p>在具体的超参数搜索过程中会需要很多问题，超参数过多、超参数之间相互依赖等等。如何一次性地把我们想要得到最好的超参数组合列出来。<code>sklearn</code>中专门封装了一个超参数网格搜索方法<code>Grid Serach</code>。</p><p>在进行网格搜索之前，首先需要定义一个搜索的参数<code>param_search</code>。是一个数组，数组中的每个元素是个字典，字典中的是对应的一组网格搜索，每一组网格搜索是这一组网格搜索每个参数的取值范围。键是参数的名称，值是键所对应的参数的列表。</p><pre class=" language-python"><code class="language-python">param_search <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"weights"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"uniform"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"n_neighbors"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token string">"weights"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"distance"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"n_neighbors"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"p"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>可以看到，当<code>weights = uniform</code>即不使用距离时，我们只搜索超参数k，当<code>weights = distance</code>即使用距离时，需要看超参数p使用那个距离公式。下面创建要进行网格搜索所对应的分类算法并调用刚哥搜索：</p><pre class=" language-python"><code class="language-python">knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用网格搜索方法</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV<span class="token comment" spellcheck="true"># 定义网格搜索的对象grid_search，</span><span class="token comment" spellcheck="true"># 其构造函数的第一个参数表示对哪一个分类器进行算法搜索，</span><span class="token comment" spellcheck="true"># 第二个参数表示网格搜索相应的参数</span>grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>knn_clf<span class="token punctuation">,</span> param_search<span class="token punctuation">)</span></code></pre><p>下面就是针对X_train1, y_train1，使用grid_search在param_search列表中寻找最佳超参数组：</p><pre class=" language-python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>timegrid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train1<span class="token punctuation">,</span> y_train1<span class="token punctuation">)</span></code></pre><pre><code>输出：Wall time: 662 msGridSearchCV(cv=None, error_score='raise',       estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',           metric_params=None, n_jobs=1, n_neighbors=5, p=2,           weights='uniform'),       fit_params=None, iid=True, n_jobs=1,       param_grid=[{'weights': ['uniform'], 'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {'weights': ['distance'], 'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'p': [1, 2, 3, 4, 5]}],       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',       scoring=None, verbose=0)</code></pre><p>可以使用网格搜索的评估函数来返回最佳分类起所对应的参数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 返回的是网格搜索搜索到的最佳的分类器对应的参数 </span>grid_search<span class="token punctuation">.</span>best_estimator_</code></pre><pre><code>KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',           metric_params=None, n_jobs=1, n_neighbors=5, p=2,           weights='uniform')</code></pre><p>也可以查看最佳参数的分类器的准确度。</p><p>我们会注意到，<code>best_estimator_</code>和<code>best_score_</code>参数后面有一个<code>_</code>。这是一种常见的语法规范，不是用户传入的参数，而是根据用户传入的规则，自己计算出来的结果，参数名字后面接<code>_</code></p><pre class=" language-python"><code class="language-python">grid_search<span class="token punctuation">.</span>best_score_</code></pre><pre><code>输出：0.9833333333333333</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建立博客的初衷</title>
      <link href="/2019/12/10/jian-li-bo-ke-de-chu-zhong/"/>
      <url>/2019/12/10/jian-li-bo-ke-de-chu-zhong/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊建立博客的初衷与对未来的展望"><a href="#聊聊建立博客的初衷与对未来的展望" class="headerlink" title="聊聊建立博客的初衷与对未来的展望"></a>聊聊建立博客的初衷与对未来的展望</h1><h2 id="一、为什么建立个人博客"><a href="#一、为什么建立个人博客" class="headerlink" title="一、为什么建立个人博客"></a>一、为什么建立个人博客</h2><p>我和大多数人一样，是个平凡而普通的人。在过去的二十多年里，我过着普通的生活、接受着普通的教育，有自己的想法却又不付诸行动，是一条不折不扣的咸鱼🙈。</p><p>在大学中因为种种原因没有参加校招而去了一家小公司，当时看重的是这家公司的发展前景，但是现实还是给我上了一课，其中的酸涩只有经历过的人才能体会。因此如果你是快要毕业的计算机专业学生且打算从事专业对口的工作，我<strong>强烈建议你千万不要去小公司</strong>（也不是绝对，我会专门写一篇博客说说我的理由）！当初是我自己的选择，因此我不后悔，我觉得：</p><ol><li><strong>作为一个成年人，任何的选择都应该做出充分的考虑，是权衡利弊后最终的结果，理应为此做好最坏的打算</strong>；</li><li><strong>我相信任何的经历都是独一无二的，都是你成长过程中宝贵的财富</strong>；</li><li><strong>你的每段经历都会对你的未来产生潜移默化的影响，这种未知的可能性让人妙不可言</strong>。</li></ol><p>19年8月份我裸辞了，及时止损😎。一是因为工作的原因想休息休息，对于二十几岁的我来说，<strong>身体上的劳累尚可接受，心理上的压抑让我寝食难安</strong>；另外一个原因是想换个方向。</p><p>我大学学的是计算机专业（普通二本），我自认为在我们班中专业能力还算靠前，毕业后的第一份工作也是Java开发，但是因为我自己疏于学习，加之这家公司不使用主流的框架、没有任何的代码规范、不适用任何的版本控制工具等等等等的原因，让我觉得这段工作没有让我在技术上有太大的提升，已经显著落后与同龄人。这令我对重新找一份<strong>我满意</strong>的Java开发工作没有太大的信心；另一方面也是因为第一段工作的原因让我对<strong>数据分析</strong>产生了浓厚的兴趣，因此想找一份数据分析方向的工作。</p><p>在家自学了三个月，每天看看学习视频、写写代码、读读书、刷刷剧、炒炒股、陪朋友打打游戏、做做饭、晒晒太阳、睡睡懒觉，日子过得也还算充实有趣。19年11月底我重新找到了一个还算比较满意数据分析工作，<strong>新的工作、新的同事、新的生活</strong>，我觉得我也应该做出些改变。</p><p>我是一个性格比较内敛的人，不喜欢拍照，留下的照片也寥寥无几，但是在过去的二十年，照片绝对是记录生活的一个很好的载体。我现在已经回忆不起我在过去的某个时间段做过什么事情，如果你喜欢写日记，那就坚持下去，如果你害怕日记写成流水账就多拍拍照片/vlog，因为这些<strong>具象化</strong>的东西会快速调起你的回忆，也帮你记录生活。</p><p>我自觉还算是一个对技术<strong>充满渴望</strong>的人，所以个人博客可能对我来说是个不错的选择。博客不仅记录我学习、思考的过程，同时也可以记录一下日常的生活，对于我来说，建立博客的好处有一下几点：</p><ul><li>我有拖延症，博客可以从一方面push我不断学习新的知识</li><li>我自己的理解能力尚可，表达能力欠佳，写作可以锻炼我的思维与表达能力</li><li>能加深自己对知识的理解，形成自己的知识体系</li><li>算是对个人知识、个人生活的归档与记录，方便日后查阅，同时在技术上也可以顺便解决他人类似的问题</li></ul><p>最后，努力奋斗，努力做一个<code>自由而无用</code>的人😆。</p><h2 id="二、对未来的展望"><a href="#二、对未来的展望" class="headerlink" title="二、对未来的展望"></a>二、对未来的展望</h2><h3 id="2-1、工作上"><a href="#2-1、工作上" class="headerlink" title="2.1、工作上"></a>2.1、工作上</h3><p>从<code>短期</code>来看，尽快熟悉新的工作，尽快建立通用的<code>数据分析思维</code>，尽早掌握初级分析师的全部技能</p><p>以<code>2020</code>年来说，希望自己重拾<code>数学</code>知识，在打好<code>数学基础</code>的同时学完<code>统计学</code>与<code>机器学习</code>的基础知识</p><p>从<code>长期</code>来看，先掌握<code>数据采集-数据清洗-数据建模-数据分析</code>整套流程的通用技能，再对每个过程做更深入的了解，包括且不限于<code>数据埋点、数据仓库、机器学习、深度学习、分布式爬虫、算法....</code></p><h3 id="2-2、生活上"><a href="#2-2、生活上" class="headerlink" title="2.2、生活上"></a>2.2、生活上</h3><ul><li>慢慢改掉自己拖延的坏习惯</li><li>减少零碎与娱乐信息的获取</li><li>维护和谐的家庭与社交关系</li><li>保持好奇心，保持身材</li><li>多读上市公司研报，建立自己的经济知识体系</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN算法-1-KNN简介</title>
      <link href="/2019/12/10/knn-suan-fa-1-knn-jian-jie/"/>
      <url>/2019/12/10/knn-suan-fa-1-knn-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="KNN入门"><a href="#KNN入门" class="headerlink" title="KNN入门"></a>KNN入门</h1><p>最近开始学习机器学习的有关知识，对于初学者来说，KNN算法因朴素的思想其被认为是最适合入门的机器学习算法，没有之一。本篇文章主要介绍KNN算法的基本知识与核心思想。</p><h2 id="1、KNN简介"><a href="#1、KNN简介" class="headerlink" title="1、KNN简介"></a>1、KNN简介</h2><p>kNN (k-NearestNeighbor)，也就是k最近邻算法，这是一种有监督的学习算法，该算法既可以针对离散因变量做分类，又可以对连续因变量做预测</p><h2 id="2、核心思想"><a href="#2、核心思想" class="headerlink" title="2、核心思想"></a>2、核心思想</h2><blockquote><p>近朱者赤，近墨者黑</p></blockquote><p>举个简单的例子，以下是支付宝对<code>芝麻信用分</code>的定义：</p><blockquote><p>依据用户各类消费及行为数据，结合互联网金融借贷信息，运用云计算及机器学习等技术，通过逻辑回归、决策树、随机森林等模型算法，对各维度数据进行综合处理和评估，在用户信用历史、行为偏好、履约能力、身份特质、<strong>人脉关系</strong>五个维度客观呈现个人信用状况的综合分值。</p></blockquote><p>注意<code>人脉关系</code>这个维度，用通俗的话说就是你好友中混的最差的哥们都开玛莎拉蒂，月消费几十万，那么你的消费履约能力应该也不差</p><p><img src="https://i.loli.net/2019/12/15/okjqyCK8fHAne2r.png" alt="KNN原理图片示例"></p><p>如图所示，KNN算法的本质就是寻找𝑘个最近样本，然后基于最近样本做“预测”。对于离散型的因变量来说，从𝑘个最近的已知类别样本中挑选出频率最高的类别用于未知样本的判断；对于连续型的因变量来说，则是将𝑘个最近的已知样本均值用作未知样本的预测。</p><h2 id="3、算法步骤-amp-关键点"><a href="#3、算法步骤-amp-关键点" class="headerlink" title="3、算法步骤&amp;关键点"></a>3、算法步骤&amp;关键点</h2><ul><li>确定未知样本近邻的个数𝑘值。</li></ul><ul><li>根据某种度量样本间相似度的指标（如欧氏距离）将每一个未知类别样本的最近𝑘个已知样本搜寻出来，形成一个个簇。</li></ul><ul><li>对搜寻出来的已知样本进行投票，将各簇下类别最多的分类用作未知样本点的预测。</li></ul><h3 id="3-1、K值的选择"><a href="#3-1、K值的选择" class="headerlink" title="3.1、K值的选择"></a>3.1、K值的选择</h3><p>根据经验发现，不同的𝑘值对模型的预测准确性会有比较大的影响，如果𝑘值过于偏小，可能会导致模型的过拟合；反之，又可能会使模型进入欠拟合状态。</p><p><img src="https://i.loli.net/2019/12/15/UOaQVc6PuwY7k9m.png" alt="不同K值选择导致的结果"></p><p>以芝麻分的例子来说，是选取你所有的好友来推断你的信用呢还是选取经常和你有金钱或信息来往的人进行推断呢？</p><p>目前有两种K值选择方案：</p><ul><li><p>第一种：设置k近邻样本的投票权重，假设读者在使用KNN算法进行分类或预测时设置的k值比较大，担心模型发生欠拟合的现象，一个简单有效的处理办法就是设置近邻样本的投票权重，如果已知样本距离未知样本比较远，则对应的权重就设置得低一些，否则权重就高一些，通常可以将权重设置为距离的倒数。</p></li><li><p>第二种：采用多重交叉验证法，该方法是目前比较流行的方案，其核心就是将k取不同的值，然后在每种值下执行m重的交叉验证，最后选出平均误差最小的k值。</p></li></ul><h3 id="3-2、样本间相似度的度量方法"><a href="#3-2、样本间相似度的度量方法" class="headerlink" title="3.2、样本间相似度的度量方法"></a>3.2、样本间相似度的度量方法</h3><p>前面说到可以根据样本距离的远近设置对应的权重，那么如果计算样本之间的距离呢？一下有三种计算样本间距离的方法：</p><h4 id="3-2-1、欧式距离"><a href="#3-2-1、欧式距离" class="headerlink" title="3.2.1、欧式距离"></a>3.2.1、欧式距离</h4><p><img src="https://i.loli.net/2019/12/15/WlLchdN2BqRgMt4.png" alt="欧氏距离"></p><h4 id="3-2-2、曼哈顿距离"><a href="#3-2-2、曼哈顿距离" class="headerlink" title="3.2.2、曼哈顿距离"></a>3.2.2、曼哈顿距离</h4><p><img src="https://i.loli.net/2019/12/15/jupFbCofr9qhI7e.png" alt="曼哈顿距离"></p><h4 id="3-2-3、余弦相似度"><a href="#3-2-3、余弦相似度" class="headerlink" title="3.2.3、余弦相似度"></a>3.2.3、余弦相似度</h4><p><img src="https://i.loli.net/2019/12/15/KZaG9dCvBTDILfY.png" alt="余弦相似度"></p><h4 id="3-2-4、杰卡德相似系数"><a href="#3-2-4、杰卡德相似系数" class="headerlink" title="3.2.4、杰卡德相似系数"></a>3.2.4、杰卡德相似系数</h4><p>杰卡德相似系数与余弦相似度经常被用于推荐算法，计算用户之间的相似性。例如，A用户购买了10件不同的商品，B用户购买了15件不同的商品，则两者之间的相似系数可以表示为：</p><p>$$J(A,B)=\displaystyle  \frac {|A \cap B|}{|A \cup B|}$$</p><p>其中，|A⋂B|表示两个用户所购买相同商品的数量，|A⋃B|代表两个用户购买所有产品的数量。例如，A用户购买的10件商品中有8件与B用户一致，且两个用户一共购买了17件不同的商品，则它们的杰卡德相似系数为8/17。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KNN </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
